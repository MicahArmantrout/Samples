This project demonstrates a simple way to intercept exceptions and display a user-friendly error page

The home page contains a link to a second page.
Any attempt to load the second page should cause an exception to be thrown.
Response to the exception should be display of the exception message on an error page.

Elements involved in the exception mechanism:

1.  An Error controller with an action to deliver an Error page (this is "custom" just like any other Razor page)
2.  A corresponding View for the Error controller action (also "custom")
3.  An Application_Error method in the application class (in Global.Asax.cs) to intercept exceptions and initiate our custom response
4.  We do not use  filters.Add(new HandleErrorAttribute()); (in FilterConfig.cs). In fact, we don't even use FilterConfig.cs in this example.

NOTES:

o  No web.config settings are involved/required
o  Shared/Error.cshtml as generated by Visual Studio templates is not used
o  When the error page is rendered, the originally requested URL will appear in the browser's address bar (page response is replaced; there is no redirection)
o  A drawback of this approach is the use of querystring parameters to communicate exception information to the view. Should not be a problem for a short message, but not practical for anything more.
